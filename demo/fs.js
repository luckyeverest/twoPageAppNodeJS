const fs = require('fs')//1 fale system , позволяет рабоать с файлами
const path = require('path')// 2 подключаем модуль


/* fs.mkdir(path.join(__dirname, 'test'), (err) => {//3 обращаемся к fs вызываем метод join который возвращает строку,делаем новую папку относительно данной дириктории,папка называтся текст
    if (err) {
        throw err
    } //4 если мы рабоатем с асинхроными опирациями то первый параметр в callback функции всегда является ошибкой, далше мы проверяем ест ли такая ошибка
    console.log('папка создана')
}) */
//------------------------------------запись фалов--------------------------------------
/* 
const filePath = path.join(__dirname, 'test', 'text.txt')//создание нового файла . создаем перменую,в дириктории,назвоние папки , файл

fs.writeFile(filePath, 'hello node js', (err) => {// вызываем перменую ,(строчка где храница файл, контент,callback(который принимает в себе ошибку))
    if (err) {
        throw err
    }
    console.log('файл создан')
})

fs.writeFile(filePath, '\n перетерто', (err) => {//writeFile перетирает контент внутри/appendFile - не перетирает
    if (err) {
        throw err
    }
    console.log('файл создан и перетерт')
}) */

//-------------------------------------чтение фалов-----------------------------------------
const filePath = path.join(__dirname, 'test', 'text.txt')//создание нового файла . создаем перменую,в дириктории,назвоние папки , файл


fs.readFile(filePath,'utf-8', (err, content) => {//обращаемся к модулю readrFile, передаем путь, первый параметр ошибка, второй объект контента
    if (err) {                              // можно для извлечения из буфера указать параметр utf-8
        throw err
    }
    const data = Buffer.from(content)//извлекаем контент из буфера, вызываем у буфера метод from

    /*     console.log('content', content)// получим буфер
     */

    console.log('content', data.toString())//из переменой data получаем content
})